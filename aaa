b.c.c:130:20: warning: duplicate 'short' declaration specifier [-Wduplicate-decl-specifier]
    unsigned short short _cur_column;
                   ^~~~~~
b.c.c:767:5: warning: incompatible redeclaration of library function 'snprintf' [-Wincompatible-library-redeclaration]
int snprintf(char* __s, int __maxlen, const char* __format, ...);
    ^
b.c.c:767:5: note: 'snprintf' is a builtin with type 'int (char *, unsigned long, const char *, ...)'
b.c.c:768:5: warning: incompatible redeclaration of library function 'vsnprintf' [-Wincompatible-library-redeclaration]
int vsnprintf(char* __s, int __maxlen, const char* __format, va_list __arg);
    ^
b.c.c:768:5: note: 'vsnprintf' is a builtin with type 'int (char *, unsigned long, const char *, __builtin_va_list)'
b.c.c:808:5: warning: incompatible redeclaration of library function 'fread' [-Wincompatible-library-redeclaration]
int fread(void* __ptr, int __size, int __n, struct _IO_FILE* __stream);
    ^
b.c.c:808:5: note: 'fread' is a builtin with type 'unsigned long (void *, unsigned long, unsigned long, FILE *)' (aka 'unsigned long (void *, unsigned long, unsigned long, struct _IO_FILE *)')
b.c.c:809:5: warning: incompatible redeclaration of library function 'fwrite' [-Wincompatible-library-redeclaration]
int fwrite(const void* __ptr, int __size, int __n, struct _IO_FILE* __s);
    ^
b.c.c:809:5: note: 'fwrite' is a builtin with type 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' (aka 'unsigned long (const void *, unsigned long, unsigned long, struct _IO_FILE *)')
b.c.c:844:7: warning: incompatible redeclaration of library function 'memcpy' [-Wincompatible-library-redeclaration]
void* memcpy(void* __dest, const void* __src, int __n);
      ^
b.c.c:844:7: note: 'memcpy' is a builtin with type 'void *(void *, const void *, unsigned long)'
b.c.c:845:7: warning: incompatible redeclaration of library function 'memmove' [-Wincompatible-library-redeclaration]
void* memmove(void* __dest, const void* __src, int __n);
      ^
b.c.c:845:7: note: 'memmove' is a builtin with type 'void *(void *, const void *, unsigned long)'
b.c.c:846:7: warning: incompatible redeclaration of library function 'memccpy' [-Wincompatible-library-redeclaration]
void* memccpy(void* __dest, const void* __src, int __c, int __n);
      ^
b.c.c:846:7: note: 'memccpy' is a builtin with type 'void *(void *, const void *, int, unsigned long)'
b.c.c:847:7: warning: incompatible redeclaration of library function 'memset' [-Wincompatible-library-redeclaration]
void* memset(void* __s, int __c, int __n);
      ^
b.c.c:847:7: note: 'memset' is a builtin with type 'void *(void *, int, unsigned long)'
b.c.c:848:5: warning: incompatible redeclaration of library function 'memcmp' [-Wincompatible-library-redeclaration]
int memcmp(const void* __s1, const void* __s2, int __n);
    ^
b.c.c:848:5: note: 'memcmp' is a builtin with type 'int (const void *, const void *, unsigned long)'
b.c.c:850:7: warning: incompatible redeclaration of library function 'memchr' [-Wincompatible-library-redeclaration]
void* memchr(const void* __s, int __c, int __n);
      ^
b.c.c:850:7: note: 'memchr' is a builtin with type 'void *(const void *, int, unsigned long)'
b.c.c:854:7: warning: incompatible redeclaration of library function 'strncpy' [-Wincompatible-library-redeclaration]
char* strncpy(char* __dest, const char* __src, int __n);
      ^
b.c.c:854:7: note: 'strncpy' is a builtin with type 'char *(char *, const char *, unsigned long)'
b.c.c:856:7: warning: incompatible redeclaration of library function 'strncat' [-Wincompatible-library-redeclaration]
char* strncat(char* __dest, const char* __src, int __n);
      ^
b.c.c:856:7: note: 'strncat' is a builtin with type 'char *(char *, const char *, unsigned long)'
b.c.c:858:5: warning: incompatible redeclaration of library function 'strncmp' [-Wincompatible-library-redeclaration]
int strncmp(const char* __s1, const char* __s2, int __n);
    ^
b.c.c:858:5: note: 'strncmp' is a builtin with type 'int (const char *, const char *, unsigned long)'
b.c.c:860:5: warning: incompatible redeclaration of library function 'strxfrm' [-Wincompatible-library-redeclaration]
int strxfrm(char* __dest, const char* __src, int __n);
    ^
b.c.c:860:5: note: 'strxfrm' is a builtin with type 'unsigned long (char *, const char *, unsigned long)'
b.c.c:864:7: warning: incompatible redeclaration of library function 'strndup' [-Wincompatible-library-redeclaration]
char* strndup(const char* __string, int __n);
      ^
b.c.c:864:7: note: 'strndup' is a builtin with type 'char *(const char *, unsigned long)'
b.c.c:868:5: warning: incompatible redeclaration of library function 'strcspn' [-Wincompatible-library-redeclaration]
int strcspn(const char* __s, const char* __reject);
    ^
b.c.c:868:5: note: 'strcspn' is a builtin with type 'unsigned long (const char *, const char *)'
b.c.c:869:5: warning: incompatible redeclaration of library function 'strspn' [-Wincompatible-library-redeclaration]
int strspn(const char* __s, const char* __accept);
    ^
b.c.c:869:5: note: 'strspn' is a builtin with type 'unsigned long (const char *, const char *)'
b.c.c:878:7: warning: incompatible redeclaration of library function 'mempcpy' [-Wincompatible-library-redeclaration]
void* mempcpy(void* __dest, const void* __src, int __n);
      ^
b.c.c:878:7: note: 'mempcpy' is a builtin with type 'void *(void *, const void *, unsigned long)'
b.c.c:879:5: warning: incompatible redeclaration of library function 'strlen' [-Wincompatible-library-redeclaration]
int strlen(const char* __s);
    ^
b.c.c:879:5: note: 'strlen' is a builtin with type 'unsigned long (const char *)'
b.c.c:886:5: warning: incompatible redeclaration of library function 'bcmp' [-Wincompatible-library-redeclaration]
int bcmp(const void* __s1, const void* __s2, int __n);
    ^
b.c.c:886:5: note: 'bcmp' is a builtin with type 'int (const void *, const void *, unsigned long)'
b.c.c:888:6: warning: incompatible redeclaration of library function 'bzero' [-Wincompatible-library-redeclaration]
void bzero(void* __s, int __n);
     ^
b.c.c:888:6: note: 'bzero' is a builtin with type 'void (void *, unsigned long)'
b.c.c:895:5: warning: incompatible redeclaration of library function 'strncasecmp' [-Wincompatible-library-redeclaration]
int strncasecmp(const char* __s1, const char* __s2, int __n);
    ^
b.c.c:895:5: note: 'strncasecmp' is a builtin with type 'int (const char *, const char *, unsigned long)'
b.c.c:906:7: warning: incompatible redeclaration of library function 'stpncpy' [-Wincompatible-library-redeclaration]
char* stpncpy(char* __dest, const char* __src, int __n);
      ^
b.c.c:906:7: note: 'stpncpy' is a builtin with type 'char *(char *, const char *, unsigned long)'
b.c.c:928:5: warning: incompatible redeclaration of library function 'strtoll' [-Wincompatible-library-redeclaration]
int strtoll(const char* __nptr, char** __endptr, int __base);
    ^
b.c.c:928:5: note: 'strtoll' is a builtin with type 'long long (const char *, char **, int)'
b.c.c:929:14: warning: incompatible redeclaration of library function 'strtoull' [-Wincompatible-library-redeclaration]
unsigned int strtoull(const char* __nptr, char** __endptr, int __base);
             ^
b.c.c:929:14: note: 'strtoull' is a builtin with type 'unsigned long long (const char *, char **, int)'
b.c.c:986:7: warning: incompatible redeclaration of library function 'malloc' [-Wincompatible-library-redeclaration]
void* malloc(int __size);
      ^
b.c.c:986:7: note: 'malloc' is a builtin with type 'void *(unsigned long)'
b.c.c:987:7: warning: incompatible redeclaration of library function 'calloc' [-Wincompatible-library-redeclaration]
void* calloc(int __nmemb, int __size);
      ^
b.c.c:987:7: note: 'calloc' is a builtin with type 'void *(unsigned long, unsigned long)'
b.c.c:988:7: warning: incompatible redeclaration of library function 'realloc' [-Wincompatible-library-redeclaration]
void* realloc(void* __ptr, int __size);
      ^
b.c.c:988:7: note: 'realloc' is a builtin with type 'void *(void *, unsigned long)'
b.c.c:991:7: warning: incompatible redeclaration of library function 'alloca' [-Wincompatible-library-redeclaration]
void* alloca(int __size);
      ^
b.c.c:991:7: note: 'alloca' is a builtin with type 'void *(unsigned long)'
b.c.c:994:7: warning: incompatible redeclaration of library function 'aligned_alloc' [-Wincompatible-library-redeclaration]
void* aligned_alloc(int __alignment, int __size);
      ^
b.c.c:994:7: note: 'aligned_alloc' is a builtin with type 'void *(unsigned long, unsigned long)'
b.c.c:1026:5: warning: incompatible redeclaration of library function 'llabs' [-Wincompatible-library-redeclaration]
int llabs(int __x);
    ^
b.c.c:1026:5: note: 'llabs' is a builtin with type 'long long (long long)'
b.c.c:1161:47: warning: integer literal is too large to be represented in a signed integer type, interpreting as unsigned [-Wimplicitly-unsigned-literal]
    unsigned long int __result__ = ((((__bsx)&18374686479671623680)>>56)|(((__bsx)&71776119061217280)>>40)|(((__bsx)&280375465082880)>>24)|(((__bsx)&1095216660480)>>8)|(((__bsx)&4278190080)<<8)|(((__bsx)&16711680)<<24)|(((__bsx)&65280)<<40)|(((__bsx)&255)<<56));
                                              ^
b.c.c:1221:40: warning: duplicate 'short' declaration specifier [-Wduplicate-decl-specifier]
static inline _Bool short_equals(short short self, short short right){
                                       ^~~~~~
b.c.c:1221:58: warning: duplicate 'short' declaration specifier [-Wduplicate-decl-specifier]
static inline _Bool short_equals(short short self, short short right){
                                                         ^~~~~~
b.c.c:1324:43: warning: duplicate 'short' declaration specifier [-Wduplicate-decl-specifier]
static inline short int short_clone(short short self){
                                          ^~~~~~
b.c.c:1344:20: warning: expression result unused [-Wunused-value]
    if(self->buf) {(char*)come_decrement_ref_count(self->buf,0,0); }
                   ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:1365:25: warning: expression result unused [-Wunused-value]
    if(result_31->buf) {(char*)come_decrement_ref_count(result_31->buf,0,0); }
                        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:1394:24: warning: expression result unused [-Wunused-value]
        if(self->buf) {(char*)come_decrement_ref_count(self->buf,0,0); }
                       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:1412:24: warning: expression result unused [-Wunused-value]
        if(self->buf) {(char*)come_decrement_ref_count(self->buf,0,0); }
                       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:1439:67: warning: duplicate 'short' declaration specifier [-Wduplicate-decl-specifier]
static inline void buffer_append_short(struct buffer* self, short short value){
                                                                  ^~~~~~
b.c.c:1440:51: warning: duplicate 'short' declaration specifier [-Wduplicate-decl-specifier]
    buffer_append(self,(char*)&value,sizeof(short short));
                                                  ^~~~~
b.c.c:1454:24: warning: expression result unused [-Wunused-value]
        if(self->buf) {(char*)come_decrement_ref_count(self->buf,0,0); }
                       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2214:37: warning: expression result unused [-Wunused-value]
                if(litem_48->item) {(char*)come_decrement_ref_count(litem_48->item,0,0); }
                                    ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2223:37: warning: expression result unused [-Wunused-value]
                if(litem_49->item) {(char*)come_decrement_ref_count(litem_49->item,0,0); }
                                    ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2232:37: warning: expression result unused [-Wunused-value]
                if(litem_50->item) {(char*)come_decrement_ref_count(litem_50->item,0,0); }
                                    ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2697:37: warning: incompatible function pointer types passing 'void (struct __current_stack1__ *)' to parameter of type 'void (*)(void *)' [-Wincompatible-function-pointer-types]
    int_times(3,&__current_stack1__,method_block1);
                                    ^~~~~~~~~~~~~
b.c.c:1184:61: note: passing argument to parameter 'block' here
static inline void int_times(int self, void* parent, void (*block)(void*)){
                                                            ^
b.c.c:2747:49: warning: incompatible function pointer types passing 'void (struct __current_stack2__ *, int, int, _Bool *)' to parameter of type 'void (*)(void *, int, int, _Bool *)' [-Wincompatible-function-pointer-types]
    list$1int_each(liX2_120,&__current_stack2__,method_block2);
                                                ^~~~~~~~~~~~~
b.c.c:1091:73: note: passing argument to parameter 'block' here
static void list$1int_each(struct list$1int* self, void* parent, void (*block)(void*,int,int,_Bool*));
                                                                        ^
b.c.c:2803:48: warning: incompatible function pointer types passing 'void (struct __current_stack3__ *, int, int, _Bool *)' to parameter of type 'void (*)(void *, int, int, _Bool *)' [-Wincompatible-function-pointer-types]
    list$1int_each(li2_134,&__current_stack3__,method_block3);
                                               ^~~~~~~~~~~~~
b.c.c:1091:73: note: passing argument to parameter 'block' here
static void list$1int_each(struct list$1int* self, void* parent, void (*block)(void*,int,int,_Bool*));
                                                                        ^
b.c.c:2810:62: warning: incompatible integer to pointer conversion passing 'int' to parameter of type 'char *' [-Wint-conversion]
    xassert("list::insert",strcmp(list$1charph_item(li_132,0,-1),"ABC")==0&&strcmp(list$1charph_item(li_132,1,-1),"GGG")==0&&strcmp(list$1charph_item(li_132,2,-1),"DEF")==0&&strcmp(list$1charph_item(li_132,3,-1),"GHI")==0);
                                                             ^~
b.c.c:1097:79: note: passing argument to parameter 'default_value' here
static char* list$1charph_item(struct list$1charph* self, int position, char* default_value);
                                                                              ^
b.c.c:2810:111: warning: incompatible integer to pointer conversion passing 'int' to parameter of type 'char *' [-Wint-conversion]
    xassert("list::insert",strcmp(list$1charph_item(li_132,0,-1),"ABC")==0&&strcmp(list$1charph_item(li_132,1,-1),"GGG")==0&&strcmp(list$1charph_item(li_132,2,-1),"DEF")==0&&strcmp(list$1charph_item(li_132,3,-1),"GHI")==0);
                                                                                                              ^~
b.c.c:1097:79: note: passing argument to parameter 'default_value' here
static char* list$1charph_item(struct list$1charph* self, int position, char* default_value);
                                                                              ^
b.c.c:2810:160: warning: incompatible integer to pointer conversion passing 'int' to parameter of type 'char *' [-Wint-conversion]
    xassert("list::insert",strcmp(list$1charph_item(li_132,0,-1),"ABC")==0&&strcmp(list$1charph_item(li_132,1,-1),"GGG")==0&&strcmp(list$1charph_item(li_132,2,-1),"DEF")==0&&strcmp(list$1charph_item(li_132,3,-1),"GHI")==0);
                                                                                                                                                               ^~
b.c.c:1097:79: note: passing argument to parameter 'default_value' here
static char* list$1charph_item(struct list$1charph* self, int position, char* default_value);
                                                                              ^
b.c.c:2810:209: warning: incompatible integer to pointer conversion passing 'int' to parameter of type 'char *' [-Wint-conversion]
    xassert("list::insert",strcmp(list$1charph_item(li_132,0,-1),"ABC")==0&&strcmp(list$1charph_item(li_132,1,-1),"GGG")==0&&strcmp(list$1charph_item(li_132,2,-1),"DEF")==0&&strcmp(list$1charph_item(li_132,3,-1),"GHI")==0);
                                                                                                                                                                                                                ^~
b.c.c:1097:79: note: passing argument to parameter 'default_value' here
static char* list$1charph_item(struct list$1charph* self, int position, char* default_value);
                                                                              ^
b.c.c:2896:48: warning: incompatible function pointer types passing 'void (struct __current_stack4__ *, int, int, _Bool *)' to parameter of type 'void (*)(void *, int, int, _Bool *)' [-Wincompatible-function-pointer-types]
    list$1int_each(liZ_182,&__current_stack4__,method_block4);
                                               ^~~~~~~~~~~~~
b.c.c:1091:73: note: passing argument to parameter 'block' here
static void list$1int_each(struct list$1int* self, void* parent, void (*block)(void*,int,int,_Bool*));
                                                                        ^
b.c.c:2959:60: warning: incompatible function pointer types passing 'void (struct __current_stack5__ *, int, int, _Bool *)' to parameter of type 'void (*)(void *, int, int, _Bool *)' [-Wincompatible-function-pointer-types]
    list$1int_each(__list_value3___189,&__current_stack5__,method_block5);
                                                           ^~~~~~~~~~~~~
b.c.c:1091:73: note: passing argument to parameter 'block' here
static void list$1int_each(struct list$1int* self, void* parent, void (*block)(void*,int,int,_Bool*));
                                                                        ^
b.c.c:3024:26: warning: incompatible function pointer types assigning to 'void (*)(void *)' from 'void (struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value1->finalize=sDataA_finalize;
                         ^~~~~~~~~~~~~~~~
b.c.c:3025:23: warning: incompatible function pointer types assigning to 'void *(*)(void *)' from 'struct sDataA *(struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value1->clone=sDataA_clone;
                      ^~~~~~~~~~~~~
b.c.c:3026:21: warning: incompatible function pointer types assigning to 'int (*)(void *, int, int)' from 'int (struct sDataA *, int, int)' [-Wincompatible-function-pointer-types]
    _inf_value1->fun=sDataA_fun;
                    ^~~~~~~~~~~
b.c.c:3027:17: warning: incompatible pointer types assigning to 'struct IA **' from 'struct IA *' [-Wincompatible-pointer-types]
    _inf_valueX1=(struct IA*)come_increment_ref_count(((struct IA*)(right_value180=_inf_value1)));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3029:11: warning: incompatible pointer types assigning to 'struct IA *' from 'struct IA **'; dereference with * [-Wincompatible-pointer-types]
    ia_256=_inf_valueX1;
          ^~~~~~~~~~~~~
           *
b.c.c:3040:26: warning: incompatible function pointer types assigning to 'void (*)(void *)' from 'void (struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value2->finalize=sDataA_finalize;
                         ^~~~~~~~~~~~~~~~
b.c.c:3041:23: warning: incompatible function pointer types assigning to 'void *(*)(void *)' from 'struct sDataA *(struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value2->clone=sDataA_clone;
                      ^~~~~~~~~~~~~
b.c.c:3042:21: warning: incompatible function pointer types assigning to 'int (*)(void *, int, int)' from 'int (struct sDataA *, int, int)' [-Wincompatible-function-pointer-types]
    _inf_value2->fun=sDataA_fun;
                    ^~~~~~~~~~~
b.c.c:3043:17: warning: incompatible pointer types assigning to 'struct IA **' from 'struct IA *' [-Wincompatible-pointer-types]
    _inf_valueX5=(struct IA*)come_increment_ref_count(((struct IA*)(right_value189=_inf_value2)));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3045:35: warning: incompatible pointer types passing 'struct IA **' to parameter of type 'struct IA *'; dereference with * [-Wincompatible-pointer-types]
    list$1IAph_push_back(liIA_259,_inf_valueX5);
                                  ^~~~~~~~~~~~
                                  *
b.c.c:1142:70: note: passing argument to parameter 'item' here
static void list$1IAph_push_back(struct list$1IAph* self, struct IA* item);
                                                                     ^
b.c.c:3053:26: warning: incompatible function pointer types assigning to 'void (*)(void *)' from 'void (struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value3->finalize=sDataA_finalize;
                         ^~~~~~~~~~~~~~~~
b.c.c:3054:23: warning: incompatible function pointer types assigning to 'void *(*)(void *)' from 'struct sDataA *(struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value3->clone=sDataA_clone;
                      ^~~~~~~~~~~~~
b.c.c:3055:21: warning: incompatible function pointer types assigning to 'int (*)(void *, int, int)' from 'int (struct sDataA *, int, int)' [-Wincompatible-function-pointer-types]
    _inf_value3->fun=sDataA_fun;
                    ^~~~~~~~~~~
b.c.c:3056:17: warning: incompatible pointer types assigning to 'struct IA **' from 'struct IA *' [-Wincompatible-pointer-types]
    _inf_valueX6=(struct IA*)come_increment_ref_count(((struct IA*)(right_value193=_inf_value3)));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3058:35: warning: incompatible pointer types passing 'struct IA **' to parameter of type 'struct IA *'; dereference with * [-Wincompatible-pointer-types]
    list$1IAph_push_back(liIA_259,_inf_valueX6);
                                  ^~~~~~~~~~~~
                                  *
b.c.c:1142:70: note: passing argument to parameter 'item' here
static void list$1IAph_push_back(struct list$1IAph* self, struct IA* item);
                                                                     ^
b.c.c:3066:26: warning: incompatible function pointer types assigning to 'void (*)(void *)' from 'void (struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value4->finalize=sDataA_finalize;
                         ^~~~~~~~~~~~~~~~
b.c.c:3067:23: warning: incompatible function pointer types assigning to 'void *(*)(void *)' from 'struct sDataA *(struct sDataA *)' [-Wincompatible-function-pointer-types]
    _inf_value4->clone=sDataA_clone;
                      ^~~~~~~~~~~~~
b.c.c:3068:21: warning: incompatible function pointer types assigning to 'int (*)(void *, int, int)' from 'int (struct sDataA *, int, int)' [-Wincompatible-function-pointer-types]
    _inf_value4->fun=sDataA_fun;
                    ^~~~~~~~~~~
b.c.c:3069:17: warning: incompatible pointer types assigning to 'struct IA **' from 'struct IA *' [-Wincompatible-pointer-types]
    _inf_valueX7=(struct IA*)come_increment_ref_count(((struct IA*)(right_value197=_inf_value4)));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3071:35: warning: incompatible pointer types passing 'struct IA **' to parameter of type 'struct IA *'; dereference with * [-Wincompatible-pointer-types]
    list$1IAph_push_back(liIA_259,_inf_valueX7);
                                  ^~~~~~~~~~~~
                                  *
b.c.c:1142:70: note: passing argument to parameter 'item' here
static void list$1IAph_push_back(struct list$1IAph* self, struct IA* item);
                                                                     ^
b.c.c:3147:124: warning: incompatible function pointer types passing 'void (struct __current_stack6__ *)' to parameter of type 'void (*)(void *)' [-Wincompatible-function-pointer-types]
    xZZZZZZZZ_272=tuple2$2intbool_catch(((struct tuple2$2intbool*)(right_value200=fun_exception(1,2))),&__current_stack6__,method_block6);
                                                                                                                           ^~~~~~~~~~~~~
b.c.c:1147:85: note: passing argument to parameter 'block' here
static int tuple2$2intbool_catch(struct tuple2$2intbool* self, void* parent, void (*block)(void*));
                                                                                    ^
b.c.c:2643:25: warning: expression result unused [-Wunused-value]
        if(data_104.a) {(char*)come_decrement_ref_count(data_104.a,0,0); }
                        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2654:22: warning: expression result unused [-Wunused-value]
    if(data_106->a) {(char*)come_decrement_ref_count(data_106->a,0,0); }
                     ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2657:6: warning: expression result unused [-Wunused-value]
    ((int*)(right_value72=funHeap(7,7)));
     ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2673:6: warning: expression result unused [-Wunused-value]
    ((int*)(right_value78=(int*)come_calloc(1, sizeof(int)*(1))));
     ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2846:20: warning: expression result unused [-Wunused-value]
    if(axyzX_180) {(int*)come_decrement_ref_count(axyzX_180,0,0); }
                   ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2849:20: warning: expression result unused [-Wunused-value]
    if(axyzX_180) {(int*)come_decrement_ref_count(axyzX_180,0,0); }
                   ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2985:22: warning: expression result unused [-Wunused-value]
    if(tt2_244->v1) {(char*)come_decrement_ref_count(tt2_244->v1,0,0); }
                     ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:2998:23: warning: expression result unused [-Wunused-value]
    if(ttt2_247->v1) {(char*)come_decrement_ref_count(ttt2_247->v1,0,0); }
                      ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3491:34: warning: expression result unused [-Wunused-value]
            if(litem_144->item) {(char*)come_decrement_ref_count(litem_144->item,0,0); }
                                 ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3501:34: warning: expression result unused [-Wunused-value]
            if(litem_145->item) {(char*)come_decrement_ref_count(litem_145->item,0,0); }
                                 ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3515:42: warning: expression result unused [-Wunused-value]
                    if(litem_148->item) {(char*)come_decrement_ref_count(litem_148->item,0,0); }
                                         ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3723:35: warning: expression result unused [-Wunused-value]
                if(it_168->item) {(char*)come_decrement_ref_count(it_168->item,0,0); }
                                  ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3865:19: warning: incompatible pointer types assigning to 'char **' from 'char ***'; dereference with * [-Wincompatible-pointer-types]
        self->keys=((char***)(right_value135=(char***)come_calloc(1, sizeof(char**)*(1*(128)))));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                   *(                                                                           )
b.c.c:3866:20: warning: incompatible pointer types assigning to 'int *' from 'int **'; dereference with * [-Wincompatible-pointer-types]
        self->items=((int**)(right_value136=(int**)come_calloc(1, sizeof(int*)*(1*(128)))));
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    *(                                                                     )
b.c.c:3867:29: warning: incompatible pointer types assigning to '_Bool *' from '_Bool **'; dereference with * [-Wincompatible-pointer-types]
        self->item_existance=((_Bool**)(right_value137=(_Bool**)come_calloc(1, sizeof(_Bool*)*(1*(128)))));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             *(                                                                           )
b.c.c:3877:29: warning: expression result unused [-Wunused-value]
        if(self->key_list) {(struct list$1charp*)come_decrement_ref_count(self->key_list,0,0); }
                            ^                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:3959:32: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                if(char_equals(self->keys[it_212],key)) {
                               ^~~~~~~~~~~~~~~~~~
                               *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:3959:51: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                if(char_equals(self->keys[it_212],key)) {
                                                  ^~~
                                                  *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4007:15: warning: incompatible pointer to integer conversion assigning to 'int' from 'char *' [-Wint-conversion]
        it_212=list$1charp_next(self->key_list)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4009:28: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
            if(char_equals(it2_215,key)) {
                           ^~~~~~~
                           *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:4009:36: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
            if(char_equals(it2_215,key)) {
                                   ^~~
                                   *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4045:25: warning: incompatible pointer types assigning to 'char **' from 'char ***'; dereference with * [-Wincompatible-pointer-types]
                keys_197=((char***)(right_value141=(char***)come_calloc(1, sizeof(char**)*(1*(size_196)))));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                         *(                                                                                )
b.c.c:4046:26: warning: incompatible pointer types assigning to 'int *' from 'int **'; dereference with * [-Wincompatible-pointer-types]
                items_198=((int**)(right_value142=(int**)come_calloc(1, sizeof(int*)*(1*(size_196)))));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                          *(                                                                          )
b.c.c:4047:35: warning: incompatible pointer types assigning to '_Bool *' from '_Bool **'; dereference with * [-Wincompatible-pointer-types]
                item_existance_199=((_Bool**)(right_value143=(_Bool**)come_calloc(1, sizeof(_Bool*)*(1*(size_196)))));
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   *(                                                                                )
b.c.c:4127:48: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                                if(char_equals(self->keys[it_206],key)) {
                                               ^~~~~~~~~~~~~~~~~~
                                               *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:4127:67: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                                if(char_equals(self->keys[it_206],key)) {
                                                                  ^~~
                                                                  *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4251:32: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                if(char_equals(it_223,it2_227)) {
                               ^~~~~~
                               *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:4251:39: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                if(char_equals(it_223,it2_227)) {
                                      ^~~~~~~
                                      *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4343:40: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                        if(char_equals(self->keys[it_239],key)) {
                                       ^~~~~~~~~~~~~~~~~~
                                       *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:4343:59: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                        if(char_equals(self->keys[it_239],key)) {
                                                          ^~~
                                                          *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4391:23: warning: incompatible pointer to integer conversion assigning to 'int' from 'char *' [-Wint-conversion]
                it_239=list$1charp_next(self->key_list)
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4393:36: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                    if(char_equals(it2_241,key)) {
                                   ^~~~~~~
                                   *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:4393:44: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
                    if(char_equals(it2_241,key)) {
                                           ^~~
                                           *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4410:23: warning: expression result unused [-Wunused-value]
        if(self->v1) {(char*)come_decrement_ref_count(self->v1,0,0); }
                      ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4428:23: warning: expression result unused [-Wunused-value]
        if(self->v1) {(char*)come_decrement_ref_count(self->v1,0,0); }
                      ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4446:25: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
        if(!char_equals(left->v1,right->v1)) {
                        ^~~~~~~~
                        *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:4446:34: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
        if(!char_equals(left->v1,right->v1)) {
                                 ^~~~~~~~~
                                 *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4459:25: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
        if(!char_equals(left->v1,right->v1)) {
                        ^~~~~~~~
                        *
b.c.c:1217:38: note: passing argument to parameter 'self' here
static inline _Bool char_equals(char self, char right){
                                     ^
b.c.c:4459:34: warning: incompatible pointer to integer conversion passing 'char *' to parameter of type 'char'; dereference with * [-Wint-conversion]
        if(!char_equals(left->v1,right->v1)) {
                                 ^~~~~~~~~
                                 *
b.c.c:1217:49: note: passing argument to parameter 'right' here
static inline _Bool char_equals(char self, char right){
                                                ^
b.c.c:4526:25: warning: incompatible pointer types assigning to 'struct IA **' from 'struct IA *' [-Wincompatible-pointer-types]
            _inf_valueX2=(struct IA*)come_increment_ref_count(item);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4528:28: warning: incompatible pointer types assigning to 'struct IA *' from 'struct IA **'; dereference with * [-Wincompatible-pointer-types]
            litem_260->item=_inf_valueX2;
                           ^~~~~~~~~~~~~
                            *
b.c.c:4537:25: warning: incompatible pointer types assigning to 'struct IA **' from 'struct IA *' [-Wincompatible-pointer-types]
            _inf_valueX3=(struct IA*)come_increment_ref_count(item);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4539:28: warning: incompatible pointer types assigning to 'struct IA *' from 'struct IA **'; dereference with * [-Wincompatible-pointer-types]
            litem_261->item=_inf_valueX3;
                           ^~~~~~~~~~~~~
                            *
b.c.c:4548:25: warning: incompatible pointer types assigning to 'struct IA **' from 'struct IA *' [-Wincompatible-pointer-types]
            _inf_valueX4=(struct IA*)come_increment_ref_count(item);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4550:28: warning: incompatible pointer types assigning to 'struct IA *' from 'struct IA **'; dereference with * [-Wincompatible-pointer-types]
            litem_262->item=_inf_valueX4;
                           ^~~~~~~~~~~~~
                            *
b.c.c:4525:34: warning: left operand of comma operator has no effect [-Wunused-value]
            if(litem_260->item) {(struct IA*)come_decrement_ref_count(litem_260->item,0,0), come_decrement_ref_count(((struct IA*)litem_260->item)->_protocol_obj,0,0); }
                                 ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4536:34: warning: left operand of comma operator has no effect [-Wunused-value]
            if(litem_261->item) {(struct IA*)come_decrement_ref_count(litem_261->item,0,0), come_decrement_ref_count(((struct IA*)litem_261->item)->_protocol_obj,0,0); }
                                 ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b.c.c:4547:34: warning: left operand of comma operator has no effect [-Wunused-value]
            if(litem_262->item) {(struct IA*)come_decrement_ref_count(litem_262->item,0,0), come_decrement_ref_count(((struct IA*)litem_262->item)->_protocol_obj,0,0); }
                                 ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
124 warnings generated.
