02transpile.c:            transpile(&info).catch {
04heap.c:        result = solve_method_generics(result, method_generics_types,info).catch
04heap.c:        result = solve_generics(result, generics_type, info).catch {
04heap.c:            var fun,new_fun_name = create_finalizer_automatically(type, fun_name, info).catch { exit(1); }
04heap.c:        sType*% obj_type = solve_generics(type, info.generics_type, info).catch {
04heap.c:        var fun,new_fun_name = create_cloner_automatically(type, fun_name, info).catch { exit(1); }
04heap.c:        sType*% obj_type = solve_generics(type, info.generics_type, info).catch {
04heap.c:        var fun,new_fun_name = create_equals_automatically(type, fun_name, info).catch { exit(1); }
04heap.c:        sType*% obj_type = solve_generics(type, info.generics_type, info).catch {
04heap.c:        var fun,new_fun_name = create_operator_equals_automatically(type, fun_name, info).catch { exit(1); }
04heap.c:        sType*% obj_type = solve_generics(type, info.generics_type, info).catch {
04heap.c:        var fun,new_fun_name = create_operator_not_equals_automatically(type, fun_name, info).catch { exit(1); }
04heap.c:                type = solve_type(type, info->generics_type, info->method_generics_types, info).catch
05function.c:                type_name = parse_word(info).catch {
05function.c:                    sNode*% node = expression(info).catch {
05function.c:    sType*% type2 = solve_generics(type, info.generics_type, info).catch {
05function.c:            parse_type(info).catch {}
05function.c:                var word2 = parse_word(info).catch {}
05function.c:        transpile_block(self.mFun.mBlock, self.mParamTypes, self.mParamNames, info).catch {
05function.c:        transpile_block(self.mFun.mBlock, self.mParamTypes, self.mParamNames, info).catch {
05function.c:    sType*% result_type = solve_generics(generics_fun->mResultType, generics_type, info).catch {
05function.c:        var param_type = solve_generics(it, generics_type, info).catch {
05function.c:    sBlock*% block = parse_block(info).catch {
05function.c:        parse_type(info).catch {};
05function.c:                word = parse_word(info).catch {}
05function.c:                    word = parse_word(info).catch {}
05function.c:                        word = parse_word(info).catch {}
05function.c:        parse_type(parse_variable_name:false, info).catch {};
06str.c:    sBlock*% block = parse_block(info, true@no_block_level).catch { return false; }
06str.c:    sBlock*% block = parse_block(info, true@no_block_level).catch { return false; }
06str.c:    sBlock*% block = parse_block(info, true@no_block_level).catch { return false; }
07var.c:            var type = solve_generics(self.type, info->generics_type, info).catch {
07var.c:                    var type = solve_generics(self.type, info->generics_type, info).catch {
07var.c:        string word = parse_word(info).catch { }
08if.c:    transpile_block(if_block, null!, null!, info).catch {
08if.c:            transpile_block(elif_node_block, null!, null!, info).catch {
08if.c:        transpile_block(else_block, null!, null!, info).catch {
09while.c:    transpile_block(block, null!, null!, info).catch {
10do_while.c:    transpile_block(block, null!, null!, info).catch {
11for.c:    transpile_block(block, null!, null!, info).catch {
12switch.c:    transpile_block(block, null!, null!, info).catch {
13op.c:        sType*% obj_type = solve_generics(type, info.generics_type, info).catch {
14struct.c:            sType*% new_type = solve_generics(type, generics_type, info).catch {
18field.c:        sType*% obj_type = solve_generics(type, info.generics_type, info).catch {
20method.c:    sType*% obj_type = solve_generics(type, info.generics_type, info).catch {
20method.c:            sNode*% node = parse_function(info).catch {
21obj.c:    sType*% type2 = solve_generics(type, info->generics_type, info).catch {
21obj.c:    var type2 = solve_generics(type, info->generics_type, info).catch {
a.c:    int x = fun(1, 2).catch { };
e.c:    fun2().catch {
